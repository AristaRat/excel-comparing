/**
 * appears when Option One is chosen in game menu
 *
 * modified     20220823
 * date         20220823
 *
 * @filename OptionOne.java
 * @author juliezhang
 * @version 1.0
 */

import javax.swing.ImageIcon;

public class OptionOne extends javax.swing.JFrame {

    // imports all the images used in this program
    ImageIcon rockIcon = new ImageIcon(getClass().getResource("Rock.png"));
    ImageIcon scissorsIcon = new ImageIcon(getClass().getResource("Scissors.png"));
    ImageIcon paperIcon = new ImageIcon(getClass().getResource("Paper.png"));

    // creates a score counter
    int playerScore = 0;
    int opponentScore = 0;

    /**
     * Creates new form OptionTwo
     */
    public OptionOne() {
        initComponents();

        // delete the text in these labels
        playerLabel.setText("");
        opponentLabel.setText("");
        result.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        rockButton = new javax.swing.JButton();
        paperButton = new javax.swing.JButton();
        scissorsButton = new javax.swing.JButton();
        explaination = new javax.swing.JLabel();
        quitButton = new javax.swing.JButton();
        opponentLabel = new javax.swing.JLabel();
        playerLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        result = new javax.swing.JLabel();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 20)); // NOI18N
        jLabel1.setText("Player");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 20)); // NOI18N
        jLabel2.setText("Opponent");

        rockButton.setText("Rock");
        rockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rockButtonActionPerformed(evt);
            }
        });

        paperButton.setText("Paper");
        paperButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paperButtonActionPerformed(evt);
            }
        });

        scissorsButton.setText("Scissors");
        scissorsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scissorsButtonActionPerformed(evt);
            }
        });

        explaination.setFont(new java.awt.Font("Helvetica Neue", 0, 15)); // NOI18N
        explaination.setText("To make a move, press rock, paper, or scissors. To quit the game, press quit.");

        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        opponentLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 20)); // NOI18N
        opponentLabel.setText("     EMPTY");

        playerLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 20)); // NOI18N
        playerLabel.setText("EMPTY");

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 0, 50)); // NOI18N
        jLabel5.setText("VS");

        result.setFont(new java.awt.Font("Helvetica Neue", 0, 40)); // NOI18N
        result.setText("EMPTY");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(explaination))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(quitButton)
                                .addGap(130, 130, 130)
                                .addComponent(result))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(scissorsButton)
                                    .addComponent(paperButton)
                                    .addComponent(rockButton))
                                .addGap(43, 43, 43)
                                .addComponent(playerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(opponentLabel)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(paperButton)
                                .addGap(18, 18, 18)
                                .addComponent(scissorsButton))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(opponentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(playerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addGap(18, 18, 18))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(quitButton)
                            .addComponent(result, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(rockButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(explaination, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void paperButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paperButtonActionPerformed
        String playerMove = "paper";
        String opponentMove;

        // makes playerLabel display Paper.png
        playerLabel.setIcon(paperIcon);

        // randomly selects "rock" "paper" or "scissors" for opponent's move, changes opponentLabel based on the move
        int random = (int) (Math.random() * 3);

        switch (random) {
            case 0 -> {
                opponentLabel.setIcon(rockIcon);
                opponentMove = "rock";
            }
            case 1 -> {
                opponentLabel.setIcon(paperIcon);
                opponentMove = "paper";
            }
            default -> {
                opponentLabel.setIcon(scissorsIcon);
                opponentMove = "scissors";
            }
        }

        // decides whether the game result is a tie, player won, or player lost
        if (playerMove.equals(opponentMove)) {
            result.setText("It's a tie!");
        } else if ((playerMove.equals("rock") && opponentMove.equals("scissors"))
                || (playerMove.equals("scissors") && opponentMove.equals("paper"))
                || (playerMove.equals("paper") && opponentMove.equals("rock"))) {
            result.setText("You won!");
            playerScore++;
        } else {
            result.setText("You lost.");
            opponentScore++;
        }

        // switches to win screen when player won 2 rounds, lose screen when opponent won 2 rounds
        if (playerScore == 2) {
            dispose();
            new WinScreen().setVisible(true);
        } else if (opponentScore == 2) {
            dispose();
            new LoseScreen().setVisible(true);
        }

    }//GEN-LAST:event_paperButtonActionPerformed

    private void scissorsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scissorsButtonActionPerformed
        String playerMove = "scissors";
        String opponentMove;

        // makes playerLabel display Scissors.png
        playerLabel.setIcon(scissorsIcon);

        // randomly selects "rock" "paper" or "scissors" for opponent's move, changes opponentLabel based on the move
        int random = (int) (Math.random() * 3);

        switch (random) {
            case 0 -> {
                opponentLabel.setIcon(rockIcon);
                opponentMove = "rock";
            }
            case 1 -> {
                opponentLabel.setIcon(paperIcon);
                opponentMove = "paper";
            }
            default -> {
                opponentLabel.setIcon(scissorsIcon);
                opponentMove = "scissors";
            }
        }

        // decides whether the game result is a tie, player won, or player lost
        if (playerMove.equals(opponentMove)) {
            result.setText("It's a tie!");
        } else if ((playerMove.equals("rock") && opponentMove.equals("scissors"))
                || (playerMove.equals("scissors") && opponentMove.equals("paper"))
                || (playerMove.equals("paper") && opponentMove.equals("rock"))) {
            result.setText("You won!");
            playerScore++;
        } else {
            result.setText("You lost.");
            opponentScore++;
        }

        // switches to win screen when player won 2 rounds, lose screen when opponent won 2 rounds
        if (playerScore == 2) {
            dispose();
            new WinScreen().setVisible(true);
        } else if (opponentScore == 2) {
            dispose();
            new LoseScreen().setVisible(true);
        }

    }//GEN-LAST:event_scissorsButtonActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed

        // gets rid of this screen
        dispose();

        // makes game ending screen visible
        new OptionFour().setVisible(true);
    }//GEN-LAST:event_quitButtonActionPerformed

    private void rockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rockButtonActionPerformed
        String playerMove = "rock";
        String opponentMove;

        // makes playerLabel display Rock.png
        playerLabel.setIcon(rockIcon);

        // randomly selects "rock" "paper" or "scissors" for opponent's move, changes opponentLabel based on the move
        int random = (int) (Math.random() * 3);

        switch (random) {
            case 0 -> {
                opponentLabel.setIcon(rockIcon);
                opponentMove = "rock";
            }
            case 1 -> {
                opponentLabel.setIcon(paperIcon);
                opponentMove = "paper";
            }
            default -> {
                opponentLabel.setIcon(scissorsIcon);
                opponentMove = "scissors";
            }
        }

        // decides whether the game result is a tie, player won, or player lost
        if (playerMove.equals(opponentMove)) {
            result.setText("It's a tie!");
        } else if ((playerMove.equals("rock") && opponentMove.equals("scissors"))
                || (playerMove.equals("scissors") && opponentMove.equals("paper"))
                || (playerMove.equals("paper") && opponentMove.equals("rock"))) {
            result.setText("You won!");
            playerScore++;
        } else {
            result.setText("You lost.");
            opponentScore++;
        }

        // switches to win screen when player won 2 rounds, lose screen when opponent won 2 rounds
        if (playerScore == 2) {
            dispose();
            new WinScreen().setVisible(true);
        } else if (opponentScore == 2) {
            dispose();
            new LoseScreen().setVisible(true);
        }

    }//GEN-LAST:event_rockButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OptionTwo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OptionTwo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OptionTwo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OptionTwo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OptionTwo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel explaination;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel opponentLabel;
    private javax.swing.JButton paperButton;
    private javax.swing.JLabel playerLabel;
    private javax.swing.JButton quitButton;
    private javax.swing.JLabel result;
    private javax.swing.JButton rockButton;
    private javax.swing.JButton scissorsButton;
    // End of variables declaration//GEN-END:variables
}
